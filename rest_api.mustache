-module(rest_api).

-import(validator).
-import(rest_model).

%
% {{appName}}
%
% {{appDescription}}
% Version: {{version}}

%
% @doc Returns a Cowboy-understandable PathList of routes supported by a module
% implementing this behavior.
% @see rest_module_behavior
% @end
%
-spec routes() ->
    [{PathMatch :: binary(), rest_handler, State :: rstate()}].
routes() ->
    S = #rstate{module = ?MODULE, root = spaces},
    M = rest_handler,
    [
{{#operations}}
{{#operation}}
      { <<"{{basePathWithoutHost}}{{path}}">>, {{operationId}}, S#rstate{resource = hosts, method = '{{httpMethod}}' },
{{/operation}}
{{/operations}}
	].


{{#operations}}
{{#operation}}
%
% '{{basePathWithoutHost}}{{path}}'
% @doc {{notes}}
%
% HTTP method: {{httpMethod}}
%
{{#allParams}}
% @param {{paramName}} {{description}}
{{/allParams}}
%
-spec {{operationId}}({{#allParams}}{{dataType}} :: {{paramName}},{{/allParams}}) -> 
	{{#hasPathParams}}
	%%%
	%%% Validate path params - in case of array parameters in path they need to be parsed
	%%% by parsing a comma-separated list
	%%%
	{{#pathParams}}
		{{#isContainer}}
	validator:parse('csv', {{paramName}}),
		{{/isContainer}}
		{{^isContainer}}
	validator:parse('string', {{paramName}}),
		{{/isContainer}}	
		{{/pathParams}}
	{{/hasPathParams}}
	{{#hasConsumes}}
	%%%
	%%% Validate the input body params
	%%%
		{{#bodyParams}}
	validator:parse('{{consumes.0.mediaType}}', {{paramName}}, rest_model:{{dataType}}_schema()).
		{{/bodyParams}}
	{{/hasConsumes}}

    %%%
	%%% Call the appropriate function handler in specific module
	%%%
	{{#vendorExtensions}}{{x-onedata-module}}{{/vendorExtensions}}:{{#vendorExtensions}}{{x-onedata-function}}{{/vendorExtensions}}({{#allParams}}{{paramName}}, {{/allParams}}).
	.

{{/operation}}
{{/operations}}
